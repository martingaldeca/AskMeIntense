# Generated by Django 5.1.3 on 2024-12-10 22:06

import uuid

import core.helpers.storage_helpers
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Category name", max_length=255, verbose_name="Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Category description",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "icon",
                    models.ImageField(
                        help_text="Category icon",
                        upload_to=core.helpers.storage_helpers.handle_storage,
                        verbose_name="Icon",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Level name", max_length=255, verbose_name="Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Level's description",
                        null=True,
                        verbose_name="Description",
                    ),
                ),
                (
                    "number",
                    models.IntegerField(
                        help_text="Level's number. It will determine the grouping of the level",
                        unique=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Number",
                    ),
                ),
            ],
            options={
                "verbose_name": "Level",
                "verbose_name_plural": "Levels",
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "question",
                    models.TextField(
                        help_text="Question text, this is the main question that will appear to the asker",
                        verbose_name="Question",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("APPROVED", "APPROVED"),
                            ("DENIED", "DENIED"),
                            ("PENDING_REVIEW", "PENDING_REVIEW"),
                        ],
                        default="PENDING_REVIEW",
                        help_text="The status of the question",
                        max_length=255,
                        verbose_name="Status",
                    ),
                ),
                (
                    "example",
                    models.TextField(
                        blank=True,
                        help_text="Example of one valid answer for the question",
                        null=True,
                        verbose_name="Example",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
            },
        ),
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "answer",
                    models.TextField(
                        blank=True,
                        help_text="Answer to the question given by the respondant",
                        null=True,
                        verbose_name="Answer",
                    ),
                ),
                (
                    "asker",
                    models.ForeignKey(
                        help_text="Asker of the question",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="asked_questions_answers",
                        related_query_name="asked_questions_answers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Asker",
                    ),
                ),
                (
                    "respondent",
                    models.ForeignKey(
                        help_text="Respondent of the question",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answered_questions_answers",
                        related_query_name="answered_questions_answers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Respondent",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        help_text="Question answered by the user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        related_query_name="answers",
                        to="questions.question",
                        verbose_name="Question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Answer",
                "verbose_name_plural": "Answers",
            },
        ),
        migrations.CreateModel(
            name="QuestionLevelCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        help_text="This is the category related to a question and a level",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions_and_levels",
                        related_query_name="questions_and_levels",
                        to="questions.category",
                        verbose_name="Category",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        help_text="This is the level related to a question and a category",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions_and_categories",
                        related_query_name="questions_and_categories",
                        to="questions.level",
                        verbose_name="Level",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        help_text="This is the question related to a level and a category",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="levels_and_categories",
                        related_query_name="levels_and_categories",
                        to="questions.question",
                        verbose_name="Question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question level category",
                "verbose_name_plural": "Question level categories",
            },
        ),
        migrations.AddField(
            model_name="question",
            name="categories",
            field=models.ManyToManyField(
                through="questions.QuestionLevelCategory",
                to="questions.category",
                verbose_name="Categories",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="levels",
            field=models.ManyToManyField(
                through="questions.QuestionLevelCategory",
                to="questions.level",
                verbose_name="Levels",
            ),
        ),
        migrations.CreateModel(
            name="QuestionProposal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, unique=True
                    ),
                ),
                (
                    "proposing_user",
                    models.ForeignKey(
                        help_text="User that proposed the question",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        related_query_name="proposals",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Proposing user",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        help_text="Question answered by the user",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="questions.question",
                        verbose_name="Question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question proposal",
                "verbose_name_plural": "Question proposals",
            },
        ),
        migrations.AddIndex(
            model_name="questionlevelcategory",
            index=models.Index(
                fields=["level", "category"], name="questions_q_level_i_69db22_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="questionlevelcategory",
            unique_together={("question", "level", "category")},
        ),
    ]
