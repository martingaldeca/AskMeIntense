name: ci

on: push

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "2.1.1"
  PYLINT_FIL_UNDER_LIMIT: "8"
  POSTGRES_VERSION: "17"
  PARALLEL_TESTS_RUNNERS: "5"

jobs:
  linters-and-code-style:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    name: Run Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit environments
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        run: pre-commit run --all-files
  pylint-check:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    name: Pylint check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - name: Install poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install dependencies
        working-directory: ./src
        run: poetry install --with test
      - name: Pylint check
        working-directory: ./src
        run: poetry run pylint --fail-under=${{ env.PYLINT_FIL_UNDER_LIMIT }} apps backend
  tests:
    if: "!contains(github.event.head_commit.message, 'hotfix') && !contains(github.event.head_commit.message, 'production-testing-deployment')"
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres_tests
          POSTGRES_PASSWORD: postgres_tests
          POSTGRES_DB: postgres_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    name: Tests
    needs:
      - pylint-check
      - linters-and-code-style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
      - name: Install poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}
      - name: Install dependencies
        working-directory: ./src
        run: poetry install --with test
      - name: Update env values
        run: |
          echo "POSTGRES_USER=postgres_tests" >> .env-dist
          echo "POSTGRES_PASSWORD=postgres_tests" >> .env-dist
          echo "POSTGRES_EXTERNAL_PORT=5432" >> .env-dist
          echo "POSTGRES_DB=postgres_test" >> .env-dist
          echo "POSTGRES_HOST=localhost" >> .env-dist
          echo "SOURCE_ROOT_PATH=./src" >> .env-dist
      - name: Setup default env values
        uses: cardinalby/export-env-action@v2
        with:
          envFile: '.env-dist'
      - name: Test core
        working-directory: ./src
        run: poetry run coverage run manage.py test --parallel=${{ env.PARALLEL_TESTS_RUNNERS }} --failfast

  production-deploy:
    if: "github.ref == 'refs/heads/production' || contains(github.event.head_commit.message, 'production-testing-deployment')"
    needs: tests
    name: Production deploy
    runs-on: ubuntu-latest
    steps:
      - name: Running ssh deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          port: ${{ secrets.PROD_PORT }}
          script: cd AskMeIntense && git fetch && git pull && echo PUBLIC_IP=${{secrets.PROD_PUBLIC_IP}} >> .env && echo MINIMUM_REQUIRED_APP_VERSION_ANDROID=${{secrets.PROD_MINIMUM_REQUIRED_APP_VERSION_ANDROID}} >> .env && make complete-build && cd && echo "cicd-backend,$(date '+%Y-%m-%d %H:%M:%S')" >> deployments.csv
